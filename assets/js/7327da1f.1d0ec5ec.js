"use strict";(self.webpackChunkcodecookbook=self.webpackChunkcodecookbook||[]).push([[569],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8410:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);const r=e=>{let{slug:t}=e;return a.createElement("div",null,a.createElement("div",{className:"gumroad-product-embed"},a.createElement("a",{href:`https://8520699716163.gumroad.com/l/${t}`},"Loading...")))}},5545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(8410);const o={sidebar_position:1},s="Username & Password",l={unversionedId:"users-auth/username-password",id:"users-auth/username-password",title:"Username & Password",description:"This recipe will show you how to register users, save hashed and salted passwords in a database and issue JWTs that the frontend can use for subsequent requests.",source:"@site/recipes/users-auth/username-password.mdx",sourceDirName:"users-auth",slug:"/users-auth/username-password",permalink:"/recipes/users-auth/username-password",draft:!1,editUrl:"https://github.com/code-cookbook/code-cookbook.github.io/tree/main/recipes/users-auth/username-password.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"recipeSidebar",previous:{title:"Users & Auth",permalink:"/recipes/category/users--auth"},next:{title:"Social Authentication",permalink:"/recipes/users-auth/social"}},d={},p=[{value:"Ingredients",id:"ingredients",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Screens",id:"screens",level:3},{value:"Endpoints",id:"endpoints",level:3},{value:"Tables",id:"tables",level:3},{value:"Method",id:"method",level:2},{value:"Registration Screen",id:"registration-screen",level:3},{value:"Logic",id:"logic",level:4},{value:"Registration Endpoint",id:"registration-endpoint",level:3},{value:"Request Body",id:"request-body",level:4},{value:"Logic",id:"logic-1",level:4},{value:"Response Body",id:"response-body",level:4},{value:"Verification Screen",id:"verification-screen",level:3},{value:"Logic",id:"logic-2",level:4},{value:"Token Endpoint",id:"token-endpoint",level:3},{value:"Request Body",id:"request-body-1",level:4},{value:"Logic",id:"logic-3",level:4},{value:"Response Headers",id:"response-headers",level:4},{value:"Response Body",id:"response-body-1",level:4},{value:"Protected Endpoints",id:"protected-endpoints",level:3},{value:"Request Headers",id:"request-headers",level:4},{value:"Logic",id:"logic-4",level:4},{value:"Ready-Made Code",id:"ready-made-code",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"username--password"},"Username & Password"),(0,r.kt)("p",null,"This recipe will show you how to register users, save hashed and salted passwords in a database and issue JWTs that the frontend can use for subsequent requests."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Looking for complete code samples? Check the ",(0,r.kt)("a",{parentName:"p",href:"#ready-made-code"},"ready made code")," section!")),(0,r.kt)("h2",{id:"ingredients"},"Ingredients"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Bcrypt"},"Bcrypt")," library for hashing passwords"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://jwt.io/"},"JWT")," library for generating JSON web tokens"),(0,r.kt)("li",{parentName:"ol"},"Ability to send email from your server (for email verification)")),(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("h3",{id:"screens"},"Screens"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Path"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Register"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/register")),(0,r.kt)("td",{parentName:"tr",align:null},"Displays the registration form and sends data to the ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /users")," endpoint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Verify"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/verify?token={token}")),(0,r.kt)("td",{parentName:"tr",align:null},"Handles email verification links, sending data to ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /auth/verify"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Login"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/login")),(0,r.kt)("td",{parentName:"tr",align:null},"Displays the login form and sends data to the ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /auth/login")," endpoint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dashboard"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/")),(0,r.kt)("td",{parentName:"tr",align:null},"Only accessible if the user has a valid JWT issued. Fetches data from ",(0,r.kt)("inlineCode",{parentName:"td"},"GET /me"))))),(0,r.kt)("h3",{id:"endpoints"},"Endpoints"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Path"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POST"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/users")),(0,r.kt)("td",{parentName:"tr",align:null},"Register a new user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POST"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/auth/verify")),(0,r.kt)("td",{parentName:"tr",align:null},"Verifies a user's email address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POST"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/auth/token")),(0,r.kt)("td",{parentName:"tr",align:null},"Validates the email/password and returns a JWT")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GET"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/me")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the current user's details, only if logged in")))),(0,r.kt)("h3",{id:"tables"},"Tables"),(0,r.kt)("mermaid",{value:"erDiagram\n  User {\n      int id PK\n      string email\n      string firstName\n      string lastName\n      string password\n      string verificationToken\n      string createdAt\n      string updatedAt\n  }\n"}),(0,r.kt)("h2",{id:"method"},"Method"),(0,r.kt)("h3",{id:"registration-screen"},"Registration Screen"),(0,r.kt)("p",null,"The registration screen allows users to create accounts by specifying their email and password. It will trigger an email to be sent for verification purposes via the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /users")," endpoint."),(0,r.kt)("h4",{id:"logic"},"Logic"),(0,r.kt)("mermaid",{value:'%%{init: { "sequence": { "mirrorActors":false }}}%%\nsequenceDiagram\n    participant Browser\n    participant API\n    participant Email\n    Browser->>+API: POST /users\n    opt\n      API--\x3e>Browser: 400 Bad Request\n    end\n    API->>+Email: Send verification email\n    Note right of API: Email contains link to Verification Screen\n    API--\x3e>-Browser: 201 Created'}),(0,r.kt)("h3",{id:"registration-endpoint"},"Registration Endpoint"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /users")," endpoint is where user accounts will be registered. It accepts a body that should contain all user information necessary to create an account, including the email and password."),(0,r.kt)("h4",{id:"request-body"},"Request Body"),(0,r.kt)("p",null,"The request body can contain as few or as many fields as required for your use case. You may wish to omit the first and last names, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "meta": {\n    "verificationURL": "http://localhost:3001/verify"\n  },\n  "data": {\n    "type": "users",\n    "attributes": {\n      "firstName": "Fred",\n      "lastName": "Smith",\n      "email": "fred@codecookbook.io",\n      "password": "MyS3cureP@assword#"\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"logic-1"},"Logic"),(0,r.kt)("mermaid",{value:'%%{init: { "sequence": { "mirrorActors":false }}}%%\nsequenceDiagram\n    Browser->>+API: POST /users\n    API->>+Database: User exists?\n    opt\n      Database--\x3e>API: True\n      API--\x3e>Browser: 400 Bad Request\n    end\n    Database--\x3e>-API: False\n    API->>+Crypto: Hash password\n    Crypto--\x3e>-API: Result\n\n    API->>+Database: Create user\n    Note left of Database: Hashed password saved to database\n    Database--\x3e>-API: User\n\n    API->>API: Generate verification token\n    Note left of Database: Verification token saved to database\n    API->>API: Send verification email\n    API--\x3e>-Browser: 201 Created'}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Ensure all provided fields are valid (including password requirements)"),(0,r.kt)("li",{parentName:"ol"},"Hash and salt the provided password"),(0,r.kt)("li",{parentName:"ol"},"Save the information to the User database table"),(0,r.kt)("li",{parentName:"ol"},"Return the newly created user information")),(0,r.kt)("h4",{id:"response-body"},"Response Body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "type": "users",\n    "attributes": {\n      "id": 1234,\n      "firstName": "Fred",\n      "lastName": "Smith",\n      "email": "fred@codecookbook.io",\n      "createdAt": "2023-04-12T20:07:22.115Z",\n      "updatedAt": "2023-04-12T20:07:22.115Z"\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"verification-screen"},"Verification Screen"),(0,r.kt)("p",null,"The verification screen is used to verify a user's email address. The ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /users")," endpoint includes a link to this page when sending the verification email. The screen accepts a token in the querystring and submits the data to the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /auth/verify")," endpoint in order complete verification."),(0,r.kt)("h4",{id:"logic-2"},"Logic"),(0,r.kt)("mermaid",{value:'%%{init: { "sequence": { "mirrorActors":false }}}%%\nsequenceDiagram\n    participant Email\n    participant Browser\n    participant API\n    Email->>+Browser: Click verification link\n    Browser->>+API: POST /auth/verify\n    opt\n      API--\x3e>Browser: 401 Unauthorized\n    end\n    API->>+Database: Remove verification token\n    Database--\x3e>API: Response\n    API--\x3e>-Browser: 200 OK\n    Browser->>Browser: Redirect to Login\n    Deactivate Browser'}),(0,r.kt)("h3",{id:"token-endpoint"},"Token Endpoint"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /auth/token")," endpoint accepts the user's credentials and returns a JSON web token (JWT) which should be stored by the client for subsequent requests."),(0,r.kt)("h4",{id:"request-body-1"},"Request Body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "type: "credentials",\n    "attributes": {\n      "provider": "password",\n      "email": "fred@codecookbook.io",\n      "password": "MyS3cureP@assword#"\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"logic-3"},"Logic"),(0,r.kt)("mermaid",{value:'%%{init: { "sequence": { "mirrorActors":false }}}%%\nsequenceDiagram\n    participant Browser\n    participant API\n    participant Database\n    participant Crypto\n    participant JWT\n    Browser->>+API: POST /auth/token\n    API->>+Database: User exists and verified?\n    opt\n      Database--\x3e>API: False\n      API--\x3e>Browser: 401 Unauthorized\n    end\n    Database--\x3e>-API: User\n    API->>+Crypto: Passwords match?\n    Crypto--\x3e>-API: True\n    API->>+JWT: Sign token\n    Note left of JWT: User ID and email in payload\n    JWT--\x3e>-API: Token\n    API--\x3e>-Browser: Token (201 Created)\n    Note right of Browser: Browser stores token in cookie'}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Look up the user in the database based on the ",(0,r.kt)("inlineCode",{parentName:"li"},"email")," field",(0,r.kt)("br",{parentName:"li"}),"a. Check the user exists",(0,r.kt)("br",{parentName:"li"}),"b. Use the bcrypt library to compare the provided password to the hashed password saved in the database"),(0,r.kt)("li",{parentName:"ol"},"Generate a JWT, providing the user's ID as the ",(0,r.kt)("inlineCode",{parentName:"li"},"sub")," field"),(0,r.kt)("li",{parentName:"ol"},"Return the JWT to the client along with the user's information")),(0,r.kt)("h4",{id:"response-headers"},"Response Headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# The Set-Cookie header contains the issued JWT as a HTTP-only cookie\nSet-Cookie: access_token=dXNlcm5hbWU6cGFzc3dvcmQ...; HttpOnly\n")),(0,r.kt)("h4",{id:"response-body-1"},"Response Body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "type": "sessions",\n    "attributes": {\n      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"protected-endpoints"},"Protected Endpoints"),(0,r.kt)("p",null,"In this example we will create an endpoint called ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /users/:id")," which will return the specified user's details, but only if a valid JWT is provided and the ",(0,r.kt)("inlineCode",{parentName:"p"},"sub")," field matches the user ID requested. In other words, a user shouldn't be able to view another user's details."),(0,r.kt)("h4",{id:"request-headers"},"Request Headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n")),(0,r.kt)("h4",{id:"logic-4"},"Logic"),(0,r.kt)("mermaid",{value:'%%{init: { "sequence": { "mirrorActors":false }}}%%\nsequenceDiagram\n    participant Browser\n    participant API\n    participant Database\n    participant JWT\n    Browser->>+API: GET /me\n    Note right of Browser: JWT in Authorization header\n    opt No JWT\n      API--\x3e>Browser: 401 Unauthorized\n    end\n    API->>+JWT: Verify token\n    opt\n      JWT--\x3e>API: False\n      API--\x3e>Browser: 401 Unauthorized\n    end\n    JWT--\x3e>-API: User\n    API->>+Database: Get User by ID\n    Note right of API: Find user by ID from token\n    Database--\x3e>-API: User\n    API->>API: Action permitted?\n    Note right of API: Implement roles & permissions here\n    API--\x3e>-Browser: 200 OK\n'}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Verify the ",(0,r.kt)("inlineCode",{parentName:"li"},"Authorization")," header has been provided"),(0,r.kt)("li",{parentName:"ol"},"Use the JWT library to validate the provided token"),(0,r.kt)("li",{parentName:"ol"},"Get the user based on the ",(0,r.kt)("inlineCode",{parentName:"li"},"sub")," property extracted from the token (the user ID)"),(0,r.kt)("li",{parentName:"ol"},"Throw an unauthorized exception if any of the above fails")),(0,r.kt)("h2",{id:"ready-made-code"},"Ready-Made Code"),(0,r.kt)("p",null,"Download this recipe as a complete application!"),(0,r.kt)(i.Z,{slug:"username-password-auth",mdxType:"GumroadEmbed"}))}m.isMDXComponent=!0}}]);